{
	"info": {
		"_postman_id": "7d004c04-a1ee-4395-b0e0-c8ad6b351c06",
		"name": "homework_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "First",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/first",
							"// 1. Отправить запрос.",
							"// 2. Статус код 200",
							"// 3. Проверить, что в body приходит правильный string.",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200); ",
							"     pm.response.to.have.body(\"This is the first responce from server!ss\");",
							"    ",
							"    }); "
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5007/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "User_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"http://162.55.220.72:5005/user_info_3",
							"// 1. Отправить запрос.",
							"// 2. Статус код 200",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// 3. Спарсить response body в json.",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)",
							"// 7. Спарсить request.",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"// 11. Вывести в консоль параметр family из response.",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)",
							"pm.test(\"Test_1\", function () {",
							"    const jsonData = pm.response.json();",
							"    ",
							"    pm.expect(jsonData.name).to.eql(\"Slava\");",
							"    pm.expect(jsonData.age).to.eql(\"38\");",
							"    pm.expect(jsonData.salary).to.eql(1000);",
							"    console.log(jsonData.family);",
							"   ",
							"pm.test(\"Test_2\", function (){",
							"    const r_Data_1 = pm.request.body.formdata.toObject()",
							"",
							"    pm.expect(r_Data_1.age).to.eql(jsonData.age);",
							"    pm.expect(+r_Data_1.salary).to.eql(jsonData.salary );",
							"    pm.expect(jsonData.name).to.eql(r_Data_1.name);",
							" ",
							" pm.test(\"Test_3\", function () {",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(r_Data_1.salary * 4);",
							"    ",
							"});",
							"});",
							"});",
							" ",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Slava",
							"type": "text"
						},
						{
							"key": "age",
							"value": "38",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5007/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "User_object_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5007/object_info_3",
							"// 1. Отправить запрос.",
							"// 2. Статус код 200",
							"// 3. Спарсить response body в json.",
							"// 4. Спарсить request.",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"",
							"    let jsonData = pm.response.json();",
							"    let r_Data = pm.request.url.query.all();",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"    pm.expect(jsonData.name).to.eql(r_Data[0].value);",
							"    pm.expect(jsonData.age).to.eql(r_Data[1].value);",
							"    pm.expect(jsonData.salary).to.eql(+r_Data[2].value);",
							"// 8. Вывести в консоль параметр family из response.",
							"    console.log(jsonData.family);",
							"// 9. Проверить, что у параметра dog есть параметры name.",
							"      pm.expect(jsonData.family.pets.dog).to.have.property(\"name\");",
							"// 10. Проверить, что у параметра dog есть параметры age.",
							"     pm.expect(jsonData.family.pets.dog).to.have.property(\"age\");",
							"// 11. Проверить, что параметр name имеет значение Luky.",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\");   ",
							"// 12. Проверить, что параметр age имеет значение 4.",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(4)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Slava",
							"type": "text",
							"disabled": true
						},
						{
							"key": "age",
							"value": "38",
							"type": "text",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5007/object_info_3?name=Slava&age=38&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Slava"
						},
						{
							"key": "age",
							"value": "38"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/object_info_4",
							"// 1. Отправить запрос.",
							"// 2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// 3. Спарсить response body в json.",
							"      pm.test(\"Your test name\", function () {",
							"let jsonData = pm.response.json();",
							"// 4. Спарсить request.",
							"let r_Data = pm.request.url.query.all();",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)",
							"      pm.expect(jsonData.name).to.eql(r_Data[0].value);",
							"      pm.expect(jsonData.age).to.eql(r_Data[1].value *1 );",
							"// 7. Вывести в консоль параметр salary из request.",
							"console.log(r_Data[2]);",
							"// 8. Вывести в консоль параметр salary из response.",
							"// console.log(jsonData.salary);",
							"// // 9. Вывести в консоль 0-й элемент параметра salary из response.",
							"// console.log(jsonData.salary[0]);",
							"// // 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.",
							"// console.log(jsonData.salary[1]);",
							"// // 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.",
							"// console.log(jsonData.salary[2]);",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)",
							"    pm.expect(jsonData.salary[0]).to.eql(r_Data[2].value * 1);",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)",
							"    pm.expect(jsonData.salary[1] *1 ).to.eql(r_Data[2].value * 2);",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)",
							"    pm.expect(jsonData.salary[2] *1 ).to.eql(r_Data[2].value * 3);",
							"// 15. Создать в окружении переменную name",
							"// 16. Создать в окружении переменную age",
							"// 17. Создать в окружении переменную salary",
							"// 18. Передать в окружение переменную name",
							"// 19. Передать в окружение переменную age",
							"// 20. Передать в окружение переменную salary",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.",
							"",
							"   jsonData.salary.forEach(function(s){",
							"       console.log(s);",
							"   });",
							"",
							"    ",
							"      });"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Slava",
							"type": "text",
							"disabled": true
						},
						{
							"key": "age",
							"value": "38",
							"type": "text",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5007/object_info_4?{{name}}&{{age}}&{{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "{{name}}",
							"value": null
						},
						{
							"key": "{{age}}",
							"value": null
						},
						{
							"key": "{{salary}}",
							"value": null
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Object_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/user_info_2",
							"// 1. Вставить параметр salary из окружения в request",
							"// 2. Вставить параметр age из окружения в age",
							"// 3. Вставить параметр name из окружения в name",
							"// 4. Отправить запрос.",
							"// 5. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// 6. Спарсить response body в json.",
							"pm.test(\"Your test name\", function () {",
							"    let jsonData = pm.response.json();",
							"",
							"// 7. Спарсить request.",
							"   let r_data = pm.request.url.query.all();",
							"// 8. Проверить, что json response имеет параметр start_qa_salary",
							"pm.expect(jsonData).to.have.property(\"start_qa_salary\");",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months",
							"pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\");",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months",
							"pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\");",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year",
							"pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\");",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_yearsj",
							"pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\")",
							"// 13. Проверить, что json response имеет параметр person",
							"pm.expect(jsonData).to.have.property(\"person\");",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary ",
							"// забрать из request.)",
							"pm.expect(jsonData.start_qa_salary).to.eql(+r_data[2].value);",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)",
							"pm.expect(jsonData.qa_salary_after_6_months).to.eql(r_data[2].value *2);",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)",
							"pm.expect(jsonData.qa_salary_after_12_months).to.eql(r_data[2].value *2.7);",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)",
							"pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(r_data[2].value *3.3);",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)",
							"pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(r_data[2].value *3.8);",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)",
							"pm.expect(jsonData.person.u_name[1]).to.eql(+r_data[2].value);",
							"",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)",
							"pm.expect(jsonData.person.u_age).to.eql(+r_data[1].value);",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)",
							"pm.expect(jsonData.person.u_salary_5_years).to.eql(r_data[2].value * 4.2);",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.",
							"",
							"jsonData.person.forEach(function(p) {",
							"     console.log(p);",
							"});",
							"",
							"",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Slava",
							"type": "text",
							"disabled": true
						},
						{
							"key": "age",
							"value": "38",
							"type": "text",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5007/object_info_2?{{name}}&{{age}}&{{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"object_info_2"
					],
					"query": [
						{
							"key": "{{name}}",
							"value": null
						},
						{
							"key": "{{age}}",
							"value": null
						},
						{
							"key": "{{salary}}",
							"value": null
						}
					]
				}
			},
			"response": []
		}
	]
}